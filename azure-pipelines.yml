# Pipeline to build and test UWP SightSign App

trigger:
  branches:
    include:
      - refs/heads/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'SightSign/SightSign.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'
  version: $(Build.SourceBranch)-$(Build.BuildNumber)
  buildtp: ''

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host $(version)
      $createcert = New-SelfSignedCertificate -Type Custom -Subject "CN=A4764957-824E-49FA-8C66-DB48E7177019" -KeyUsage DigitalSignature -FriendlyName "Sight Sign" -CertStoreLocation "Cert:\CurrentUser\My" -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")
      $buildtp = $createcert.Thumbprint
      Write-Host "##vso[task.setvariable variable=buildtp;]$buildtp"
      echo local: $buildtp global: $(buildtp)

      Set-Location Cert:\CurrentUser\My
      Get-ChildItem | Format-Table Subject, FreindlyName, Thumbprint

      Get-ChildItem -Path Cert:\CurrentUser\My\
      
      $pwd = ConvertTo-SecureString -String $(SigningCert.Password) -Force -AsPlainText
      Export-PfxCertificate -cert "Cert:\CurrentUser\My\$buildtp" -FilePath $(System.DefaultWorkingDirectory)\$buildtp.pfx -Password $pwd
      
      Get-ChildItem -Path $(System.DefaultWorkingDirectory)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $pfxpath = '$(System.DefaultWorkingDirectory)\$(buildtp).pfx'
      $password = '$(SigningCert.Password)'      
            
      Add-Type -AssemblyName System.Security
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      $store.Add($cert)
      $store.Close()
      
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Set-Location $(System.DefaultWorkingDirectory)
      # (Major).(Minor).(Patch).(Revision)
      # 1) Get Version from tags
      $tagversions = git tag -l --sort=-v:refname
      $versions = $tagversions -match "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*"
      $oldversion = $versions[0]

      Write-Host "Old Version   $oldversion"

      # 2) Get Branch
      #     - if branch is master increment minor
      #     - if branch is dev increment patch
      #     - else increment revision
      $versiondetails = $oldversion -split ".", 0, "simplematch"
      Write-Host "Version Details   $versiondetails"
      if("$(Build.SourceBranch)" -eq "refs/heads/master") {
        $major = $versiondetails[0]
        $minor = $versiondetails[1] -as [int]
        $minor = $minor + 1
        $newversion = "$major.$minor.0.0"
      }elseif("$(Build.SourceBranch)" -eq "refs/heads/dev") {
        $major = $versiondetails[0]
        $minor = $versiondetails[1]
        $patch = $versiondetails[2] -as [int]
        $patch = $patch + 1
        $newversion = "$major.$minor.$patch.0"
      }else {
        $major = $versiondetails[0]
        $minor = $versiondetails[1]
        $patch = $versiondetails[2]
        $revision = $versiondetails[3] -as [int]
        $revision = $revision + 1
        $newversion = "$major.$minor.$patch.$revision"
      }

      Write-Host "New Version   $newversion"

      
      # 3) Replace version with updated version in package.appxmanifest
      $con = Get-Content $(System.DefaultWorkingDirectory)/SightSign/SightSignPackagingProject/Package.appxmanifest
      $con -match "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*"
      $conversion = Matches.0
      $con | % { $_.Replace('Version="$conversion"', 'Version="$newnersion"') } | Set-Content $(System.DefaultWorkingDirectory)/SightSign/SightSignPackagingProject/Package.appxmanifest
      $con = Get-Content $(System.DefaultWorkingDirectory)/SightSign/SightSignPackagingProject/Package.appxmanifest
      Write-Host "Con Version $conversion"
      Write-Host "Package Manifest $con"

      $zeroo = 0
      $fail = 1 / $zeroo
      
      # 4) push changes to package.appxmanifest with tag
      #git add SightSign/SightSignPackagingProject/Package.appxmanifest
      #git commit -m "Updating version to $newVersion"
      #git push origin $(Build.SourceBranch)
      #git tag $newVersion
      #git push origin --tags

- task: VSBuild@1
  inputs:
    platform: 'x64'
    solution: '$(solution)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /p:PackageCertificateKeyFile="$(System.DefaultWorkingDirectory)\$(buildtp).pfx" /p:PackageCertificateThumbprint="$(buildtp)" /p:PackageCertificatePassword="$(SigningCert.Password)"'

- task: Windows Application Driver@0
  inputs:
    OperationType: 'Start'
    AgentResolution: '1080p'

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '*UITests.dll'
    uiTests: true
    searchFolder: '$(System.DefaultWorkingDirectory)/SightSign/UITests/bin/Release/'

- task: Windows Application Driver@0
  inputs:
    OperationType: 'Stop'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
    
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
    includeRootFolder: true
    archiveType: 'zip'
    replaceExistingArchive: true
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'

- task: store-publish@0
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  inputs:
    serviceEndpoint: 'Dev Center Publish Dev Branch'
    appId: '9P1X7MTB0FJV'
    packagePath: '$(Build.ArtifactStagingDirectory)/*.appxbundle'
    force: false
    skipPolling: false